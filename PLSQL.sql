set serveroutput on;
DROP TABLE OWNER_;
DROP TABLE PATIENT;
CREATE TABLE OWNER_ (
    Owner_id NUMBER(4)  NOT NULL,
    First_name varchar2(10)  NOT NULL,
    Last_name varchar2(10)  NOT NULL,
    Phone_number NUMBER(8)  NOT NULL,
    CONSTRAINT Owner_pk PRIMARY KEY (Owner_id)
);
INSERT INTO OWNER_ VALUES(7445,'JOHN','SMITH','09925687');
INSERT INTO OWNER_ VALUES(7446,'MARY','JONES','09678009');
INSERT INTO OWNER_ VALUES(7447,'JOHN','BLAKE','096798547');
INSERT INTO OWNER_ VALUES(7448,'ELVIS','KING','05876945');
INSERT INTO OWNER_ VALUES(7449,'MONICA','ADAMS','09574957');
INSERT INTO OWNER_ VALUES(7450,'DANE','RIV','09578946');

INSERT INTO OWNER_ VALUES(7451,'NIKO','SIMP','04834145');
INSERT INTO OWNER_ VALUES(7452,'AMI','KID','04653957');
INSERT INTO OWNER_ VALUES(7453,'CODY','DORS','096798657');
INSERT INTO OWNER_ VALUES(7454,'LILY','EVANS','05765945');
INSERT INTO OWNER_ VALUES(7455,'VIKTOR','ADAMS','09578317');

CREATE TABLE Patient (
    Patient_id NUMBER(4)  NOT NULL,
    Pname varchar2(10)  NOT NULL,
    Owner_id NUMBER(4)  NOT NULL,
    Species_id NUMBER(3)  NOT NULL,
    Birth_date date  NOT NULL,
    CONSTRAINT Patient_pk PRIMARY KEY (Patient_id)
);
INSERT INTO PATIENT VALUES(2005,'SCOT',7445,001,TO_DATE('12-MAR-2017','DD-MON-YYYY'));
INSERT INTO PATIENT VALUES(2006,'MARK',7446,002,TO_DATE('22-STY-2019','DD-MON-YYYY'));
INSERT INTO PATIENT VALUES(2007,'SPIRIT',7447,003,TO_DATE('12-LIP-2010','DD-MON-YYYY'));

INSERT INTO PATIENT VALUES(2008,'MARY',7448,001,TO_DATE('20-LIS-2018','DD-MON-YYYY'));
INSERT INTO PATIENT VALUES(2009,'BLUE',7449,002,TO_DATE('14-LIP-2015','DD-MON-YYYY'));
INSERT INTO PATIENT VALUES(2010,'KON',7450,003,TO_DATE('07-LUT-2020','DD-MON-YYYY'));

CREATE TABLE WEIGHT(
     Weight_id NUMBER(4) NOT NULL,
     weight_date date NOT NULL,
     weight NUMBER(4),
     Patient_id NUMBER(4) NOT NULL,
     CONSTRAINT Weight_pk PRIMARY KEY (Weight_id)
);
INSERT INTO WEIGHT VALUES(0001, TO_DATE('12-MAR-2017','DD-MON-YYYY'),01,2005);
INSERT INTO WEIGHT VALUES(0002, TO_DATE('12-LIP-2017','DD-MON-YYYY'),03,2005);
INSERT INTO WEIGHT VALUES(0003, TO_DATE('12-MAR-2019','DD-MON-YYYY'),05,2005);

INSERT INTO WEIGHT VALUES(0004, TO_DATE('20-LUT-2019','DD-MON-YYYY'),02,2006);
INSERT INTO WEIGHT VALUES(0005, TO_DATE('15-LIP-2019','DD-MON-YYYY'),03,2006);
INSERT INTO WEIGHT VALUES(0006, TO_DATE('20-LUT-2020','DD-MON-YYYY'),05,2006);

INSERT INTO WEIGHT VALUES(0007, TO_DATE('20-SIE-2017','DD-MON-YYYY'),380,2007);
INSERT INTO WEIGHT VALUES(0008, TO_DATE('06-LUT-2018','DD-MON-YYYY'),400,2007);
INSERT INTO WEIGHT VALUES(0009, TO_DATE('08-LIP-2020','DD-MON-YYYY'),430,2007);

INSERT INTO WEIGHT VALUES(0010, TO_DATE('23-LIS-2018','DD-MON-YYYY'),05,2008);
INSERT INTO WEIGHT VALUES(0011, TO_DATE('15-STY-2019','DD-MON-YYYY'),10,2008);
INSERT INTO WEIGHT VALUES(0012, TO_DATE('12-MAR-2020','DD-MON-YYYY'),12,2008);

INSERT INTO WEIGHT VALUES(0013, TO_DATE('12-LUT-2016','DD-MON-YYYY'),05,2009);
INSERT INTO WEIGHT VALUES(0014, TO_DATE('15-MAR-2018','DD-MON-YYYY'),06,2009);
INSERT INTO WEIGHT VALUES(0015, TO_DATE('20-LUT-2021','DD-MON-YYYY'),05,2009);

INSERT INTO WEIGHT VALUES(0016, TO_DATE('07-LUT-2020','DD-MON-YYYY'),50,2010);
INSERT INTO WEIGHT VALUES(0017, TO_DATE('06-SIE-2020','DD-MON-YYYY'),250,2010);
INSERT INTO WEIGHT VALUES(0018, TO_DATE('08-LUT-2021','DD-MON-YYYY'),345,2010);
- STOP INSERT IF WEIGHT IS TOO LOW
CREATE OR REPLACE TRIGGER T1
BEFORE INSERT OR UPDATE
ON WEIGHT
FOR EACH ROW
DECLARE N_WEIGHT WEIGHT.WEIGHT%TYPE;
BEGIN
     N_WEIGHT:= :NEW.WEIGHT;
     DBMS_OUTPUT.PUT_LINE('NEW WEIGHT IS: ' || N_WEIGHT);
     IF INSERTING THEN
        IF N_WEIGHT<01 THEN
        RAISE_APPLICATION_ERROR(-20001,'WEIGHT IS TOO LOW');
        END IF;
    ELSIF UPDATING THEN
    IF N_WEIGHT <01 THEN
    :NEW.WEIGHT:= :OLD.WEIGHT;
     DBMS_OUTPUT.PUT_LINE('CANNOT MODIFY WEIGHT, VALUE TOO LOW');
     END IF;
    END IF;
END;

INSERT INTO WEIGHT VALUES(0019, TO_DATE('09-LUT-2021','DD-MON-YYYY'),0,2010);
UPDATE WEIGHT SET weight = 0 WHERE weight_id = 018;
SELECT*
FROM WEIGHT;
CREATE TABLE Procedure_ (
    Procedure_id NUMBER(8)  NOT NULL,
    PRNAME VARCHAR2(20) NOT NULL,
    Price NUMBER(7,2)  NOT NULL,
    Medication varchar2(15)  ,
    CONSTRAINT Procedure_pk PRIMARY KEY (Procedure_id)
);

INSERT INTO PROCEDURE_ VALUES (00000001,'SURGERY',2500,'ANESTHESIA');
INSERT INTO PROCEDURE_ VALUES (00000002,'VACINATION',300,'VACINE');
INSERT INTO PROCEDURE_ VALUES (00000003,'EXAMINATION',1000,NULL);
INSERT INTO PROCEDURE_ VALUES (00000004,'DENTISTRY',2000,'ANESTHESIA');
INSERT INTO PROCEDURE_ VALUES (00000005,'MICROCHIP',10,'MICROCHIP');
INSERT INTO PROCEDURE_ VALUES (00000006,'BLOOD_TRANSF',2500,'ANESTHESIA');
CREATE TABLE Species (
    Species_id NUMBER(3)  NOT NULL,
    SP_name varchar2(10)  NOT NULL,
    CONSTRAINT Species_pk PRIMARY KEY (Species_id)
);
INSERT INTO SPECIES VALUES(001,'DOG');
INSERT INTO SPECIES VALUES(002,'CAT');
INSERT INTO SPECIES VALUES (003, 'HORSE');
CREATE TABLE Visit (
    Visit_id NUMBER(4)  NOT NULL,
    Patient_id NUMBER(4)  NOT NULL,
    Worker_id NUMBER(4)  NOT NULL,
    Ward_id NUMBER(3)  NOT NULL,
    Diagnosis varchar2(12)  NOT NULL,
    Procedure_id NUMBER(8)  NOT NULL,
    Date_of_visit date  NOT NULL,
    CONSTRAINT Visit_pk PRIMARY KEY (Visit_id)
);

INSERT INTO VISIT VALUES (0001,2005,2220,101,'FRACTURE',00000001,TO_DATE('20-MAR-2019','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0002,2006,2222,102,'CAVITY',00000004,TO_DATE('10-KWI-2019','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0003,2007,2224,103,'FINE',00000003,TO_DATE('11-MAR-2020','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0004,2008,2225,101,'RABIES',00000002,TO_DATE('20-MAR-2020','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0005,2009,2226,106,'MICROCHIP',00000005,TO_DATE('20-MAR-2018','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0006,2010,2220,104,'SPRAIN',00000001,TO_DATE('11-MAR-2019','DD-MON-YYYY'));
INSERT INTO VISIT VALUES (0007,2009,2220,102,'FRACTURE',00000001,TO_DATE('11-MAR-2017','DD-MON-YYYY'));
CREATE TABLE Ward (
    Ward_id NUMBER(3)  NOT NULL,
    copacity NUMBER(2)  NOT NULL,
    CONSTRAINT Ward_pk PRIMARY KEY (Ward_id)
);

INSERT INTO WARD VALUES (101,03);
INSERT INTO WARD VALUES (102,04);
INSERT INTO WARD VALUES (103,01);
INSERT INTO WARD VALUES (104,01);
INSERT INTO WARD VALUES (105,01);
INSERT INTO WARD VALUES (106,01);

CREATE TABLE Worker (
    Worker_id NUMBER(4)  NOT NULL,
    First_name varchar2(10)  NOT NULL,
    Last_name varchar2(10)  NOT NULL,
    Occupation varchar2(10)  NOT NULL,
    Salary NUMBER (7,2)NOT NULL,
    CONSTRAINT Worker_pk PRIMARY KEY (Worker_id)
);
INSERT INTO WORKER VALUES(2220,'AL','BUR','SURGEON',3500);
INSERT INTO WORKER VALUES(2221,'MARY','GER','NURSE',1000);
INSERT INTO WORKER VALUES(2222,'STACY','HAM','SURGEON',4800);
INSERT INTO WORKER VALUES(2223,'PAUL','FRY','NURSE',800);
INSERT INTO WORKER VALUES(2224,'MARK','DON','SURGEON',3000);
INSERT INTO WORKER VALUES(2225,'RON','SNIT','SURGEON',3550);
INSERT INTO WORKER VALUES(2226,'ALLA','MAZ','SURGEON',3000);
INSERT INTO WORKER VALUES(2227,'JOHN','GLEM','NURSE',900);
INSERT INTO WORKER VALUES(2228,'Pro','Cedure','JANITOR',300);
--SHOW DIFFERENCE BETWEEN SLARY BEFORE AND AFTER
CREATE OR REPLACE TRIGGER T2
AFTER UPDATE
ON WORKER
FOR EACH ROW
DECLARE SALDIF WORKER.salary%TYPE;
BEGIN
IF ( :NEW.SALARY > :OLD.SALARY) THEN
SALDIF:= :NEW.SALARY - :OLD.SALARY;
ELSIF (:NEW.SALARY < :OLD.SALARY) THEN
SALDIF:= :OLD.SALARY - :NEW.SALARY;
END IF;
DBMS_OUTPUT.PUT_LINE('DIFFERENCE BETWEEN OLD AND NEW SALSRY: ' || SALDIF);
END;
UPDATE WORKER SET SALARY = 1200 WHERE worker_id = 2227;
--1 ARE THERE ANY PROCEDURES THAT ARE MORE EXPENSIVE THAN WORKERS SALARIES?
SELECT DISTINCT (p.prname)
FROM  Procedure_ p
WHERE p.price > ANY(SELECT SALARY
                    FROM WORKER);
--2 SHOW THE NAME OF THE PATIENT WITH THE MOST RECENT VISIT
SELECT PNAME, visit.date_of_visit
FROM PATIENT JOIN VISIT ON patient.patient_id = visit.patient_id
WHERE visit.date_of_visit = (SELECT MAX(DATE_OF_VISIT)
                             FROM VISIT);
--3 Find People who don't own any pets
SELECT O.OWNER_ID
FROM OWNER_O
WHERE NOT EXISTS(SELECT PATIENT_ID
FROM PATIENT 
WHERE PATIENT.OWNER_ID = O.OWNER_ID);
--4 show diagnoses of all surjeons
SELECT DIAGNOSIS,worker.last_name, worker.occupation
FROM VISIT JOIN WORKER ON visit.worker_id = worker.worker_id
WHERE worker.occupation = 'SURGEON';
--5 Find Workers whose salary is equal to the highest salary in their occupation 
SELECT WORKER_ID 
FROM WORKER w1
WHERE SALARY IN (SELECT MAX(w2.SALARY)
FROM WORKER w2
WHERE w2.OCCUPATION = w1.OCCUPATION
GROUP BY OCCUPATION;
--6 
SELECT Patient.Pname, Owner_.First_Name
FROM OWNER_ FULL JOIN ON PATIENT ON 
OWNER_.OWNER_ID = PATIENT.OWNER_ID 
--PROCEDURE TO DELETE WORKERS
CREATE OR REPLACE PROCEDURE P1(worker_id NUMBER)
AS 
BEGIN 
DELETE FROM WORKER 
WHERE WORKER.WORKER_ID = P1.worker_id;
END;
exec P1(2226);
--PROCEDURE CHANGE OCCUPATION OF WORKERS 
CREATE OR REPLACE PROCEDURE P2(oc1 varchar2, oc2 varchar2)
AS 
NBJ exception;
X number;
Y number;
CURSOR PersonOc1 IS SELECT WORKER_ID FROM WORKER
WHERE Occupation = oc1;
IF X = 0
THEN RAISE NBJ;
ELSE 
OPEN PersonOc1;
LOOP 
    FETCH PersonOc1 into Y;
    EXIT WHEN PersonOc1% NOTFOUND;
    UPDATE WORKER SET Occupation = oc2
    WHERE EMPNO = Y;
END LOOP;
CLOSE PersonOc1;
END IF;
EXCEPTION WHEN NBJ THEN 
DBMS_OUTPUT.PUT_LINE('Nonody has '||oc1);
END;
exec P2('JANITOR','PRESIDENT');